@using MsgextActionSrchData.Model;
@using MsgextActionSrchData.Controllers;
@using Microsoft.AspNetCore.Components;

@inject ProductController ProductsService

@page "/InitialAction"
<div class="container">
  <div class="row">
    <div class="px-4 col-10">
      <FluentListbox TOption="Product"
                    Label="Select a product"
                    Items=@products
                    Id="products-listbox"
                    Height="200px"
                    Width="98%"
                    OptionValue="@(i => i.Id)"
                    OptionText="@(i => i.Id + " " + i.Name)"
                    @bind-Value="@SelectedValue"
                    @bind-SelectedOption="@SelectedItem" />
    </div>
    <div class="px-4 col-2">
      <FluentRadioGroup Required="true" @bind-Value="DataSrc" Name="DataSrc" Orientation="Orientation.Horizontal">
          <FluentRadio Value="@("all")">All</FluentRadio>
          <FluentRadio Value="@("orderable")">Orderable</FluentRadio>
          <FluentRadio Value="@("nonorderable")">Non orderable</FluentRadio>
      </FluentRadioGroup>

      <p>
          Selected Data Source: @DataSrc <br />
          Alt Data Source: @DataSrc <br />
      </p>
            @* <FluentButton Appearance="Appearance.Accent" onclick="SbmData.submitTask()">Submit Task</FluentButton> *@
      <button onclick="SbmData.submitTask()">Submit Task</button>
    </div>
  </div>
</div>

@code {
    Product? SelectedItem;
    string? SelectedValue;
    string dataSource;

    [Parameter]public string DataSrc { get => dataSource; set
        {
            dataSource = value;
            switch (dataSource)
            {
                case "nonorderable":
                    products = ProductsService.GetNonOrderableProducts();
                    break;
                case "orderable":
                    products = ProductsService.GetOrderableProducts();
                    break;
                default:
                    products = ProductsService.GetAllProducts();
                    break;
            }
        }
    }

    public List<Product> products;

    protected override Task OnInitializedAsync()
    {
        products = ProductsService.GetAllProducts();
        return base.OnInitializedAsync();
    }
    
}
