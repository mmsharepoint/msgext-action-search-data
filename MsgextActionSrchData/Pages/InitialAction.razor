@using MsgextActionSrchData.Model;
@using MsgextActionSrchData.Controllers;
@using Microsoft.AspNetCore.Components;

@inject ProductController ProductsService
@inject IJSRuntime JS

@page "/InitialAction"
<script type="text/javascript">
    function submitTasks() {
        var hiddenLabel = document.getElementById('prodName');
        var selectedId = hiddenLabel.getAttribute('data-prodid');
        var selectedName = hiddenLabel.getAttribute('data-name');
        var selectedOrders = hiddenLabel.getAttribute('data-orders');
        var selectedOrderable = false;
        if (hiddenLabel.dataset.orderable !== undefined) {
            selectedOrderable = true;
        }
        var result = { Id: selectedId, Name: selectedName, Orders: selectedOrders, Orderable: selectedOrderable }
        alert(result.Id + " " + result.Name + " " + result.Orders + " " + result.Orderable);
        microsoftTeams.tasks.submitTask(result);
    }
</script>
<div class="container">
  <div class="row">
    <div class="px-4 col-9">
      <FluentListbox TOption="Product"
                    Label="Select a product"
                    Items=@products
                    Id="products-listbox"
                    Height="250px"
                    Width="98%"
                    OptionValue="@(i => i.Id)"
                    OptionText="@(i => i.Id + " " + i.Name)"
                    @bind-Value="@SelectedValue"
                    @bind-SelectedOption="@SelectedItem" />

            <p>
                Selected value: @SelectedValue <br />
                Selected item: @SelectedItem?.Name.ToString()
            </p>

    </div>
    <div class="px-4 col-3">
      <FluentRadioGroup Required="true" @bind-Value="DataSrc" Name="DataSrc" Orientation="Orientation.Horizontal">
          <FluentRadio Value="@("all")">All</FluentRadio>
          <FluentRadio Value="@("orderable")">Orderable</FluentRadio>
          <FluentRadio Value="@("nonorderable")">Non orderable</FluentRadio>
      </FluentRadioGroup>

      <p>
          <label id="prodName"
                  class="hiddenLabel"
                  aria-hidden="true"
                  data-name="@SelectedItem?.Name"
                  data-prodid="@SelectedItem?.Id"
                  data-orders="@SelectedItem?.Orders"
                  data-orderable="@SelectedItem?.Orderable">@SelectedItem?.Name</label>
      </p>
      <FluentButton Appearance="Appearance.Accent" @onclick="SubmitTeamsTask">Submit Task</FluentButton>
          @* <button onclick="submitTasks()">Submit Order</button> *@
    </div>
  </div>
</div>

@code {
    Product? SelectedItem = new Product
    {
        Id = "",
        Name = "",
        Orders=  0,
        Orderable= true
    };
    
    string? SelectedValue = string.Empty;
    string dataSource;

    // string prodID = " ";
    // string prodName = " ";
    // Int32 prodOrders = 17;
    // bool prodOrderable = true;

    private async Task SubmitTeamsTask()
    {
        await JS.InvokeVoidAsync("submitTasks");
    }

    [Parameter]public string DataSrc { get => dataSource; set
        {
            dataSource = value;
            switch (dataSource)
            {
                case "nonorderable":
                    products = ProductsService.GetNonOrderableProducts();
                    break;
                case "orderable":
                    products = ProductsService.GetOrderableProducts();
                    break;
                default:
                    products = ProductsService.GetAllProducts();
                    break;
            }
        }
    }

    public List<Product> products;

    protected override Task OnInitializedAsync()
    {
        products = ProductsService.GetAllProducts();
        return base.OnInitializedAsync();
    }
}
