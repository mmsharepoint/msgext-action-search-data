@using MsgextActionSrchData.Model;
@using MsgextActionSrchData.Controllers;
@using Microsoft.AspNetCore.Components;

@inject ProductController ProductsService
@inject IJSRuntime js

@page "/InitialAction"
<script type="text/javascript">
    function submitTasks() {
        var selectedName = document.getElementById('prodID').getAttribute('data-id');
        alert(selectedName);
    }
</script>
<div class="container">
  <div class="row">
    <div class="px-4 col-10">
      <FluentListbox TOption="Product"
                    Label="Select a product"
                    Items=@products
                    Id="products-listbox"
                    Height="250px"
                    Width="98%"
                    OptionValue="@(i => i.Id)"
                    OptionText="@(i => i.Id + " " + i.Name)"
                    @bind-Value="@SelectedValue"
                    @bind-SelectedOption="@SelectedItem" />

            <p>
                Selected value: @SelectedValue <br />
                Selected item: @SelectedItem?.ToString()
            </p>

    </div>
    <div class="px-4 col-2">
      <FluentRadioGroup Required="true" @bind-Value="DataSrc" Name="DataSrc" Orientation="Orientation.Horizontal">
          <FluentRadio Value="@("all")">All</FluentRadio>
          <FluentRadio Value="@("orderable")">Orderable</FluentRadio>
          <FluentRadio Value="@("nonorderable")">Non orderable</FluentRadio>
      </FluentRadioGroup>

      <p>
          <label id="prodID" data-id="@prodID">"@prodID</label>
          <label data-Name="@prodName">@prodName</label>
          <label data-orders="@prodOrders">@prodOrders</label>
          <label data-orderable= ="@prodOrderable">@prodOrderable</label>
      </p>
            @* <FluentButton Appearance="Appearance.Accent" onclick="SbmData.submitTask()">Submit Task</FluentButton> *@
            <button onclick="submitTasks()">Submit Order</button>
            @* <button onclick="SbmData.submitTask("if","Name",12,false)">Submit Order</button> *@
    </div>
  </div>
</div>

@code {
    [Parameter] public Product? SelectedItem
    { get => _selectedProduct;
        set {
            prodID = value.Id;
            prodName = value.Name;
            prodOrders = value.Orders;
            prodOrderable = value.Orderable;
        }
    }

    private Product _selectedProduct;
    private string _selectedItem;
    string? SelectedValue;
    string dataSource;

    string prodID;
    string prodName;
    Int32 prodOrders = 17;
    bool prodOrderable = true;

    [Parameter]public string DataSrc { get => dataSource; set
        {
            dataSource = value;
            switch (dataSource)
            {
                case "nonorderable":
                    products = ProductsService.GetNonOrderableProducts();
                    break;
                case "orderable":
                    products = ProductsService.GetOrderableProducts();
                    break;
                default:
                    products = ProductsService.GetAllProducts();
                    break;
            }
        }
    }

    public List<Product> products;

    protected override Task OnInitializedAsync()
    {
        products = ProductsService.GetAllProducts();
        return base.OnInitializedAsync();
    }
    // protected async Task SubmitTask()
    // {
    //     Product datObj = new Product {
    //       Id = "if",
    //       Name = "Name",
    //       Orders = 12,
    //       Orderable = false 
    //     };
    //     await js.InvokeVoidAsync("SbmData.submitTask()", datObj);
    // }

}
